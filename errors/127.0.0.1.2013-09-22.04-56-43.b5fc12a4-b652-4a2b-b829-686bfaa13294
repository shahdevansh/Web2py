(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'Insert'"
p3
sS'layer'
p4
S'/home/ds-iiit/web2py/applications/Gordian_Knot/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n@auth.requires_login()\ndef addquestion():\n\tform = crud.create(\'Trivia\')\n\treturn dict(form=form)\n\n@auth.requires_login()\ndef updatequestion():\n\tno = int(request.args(0))\n\tform = crud.update(\'Trivia\',no)\n\treturn dict(form=form)\n\n@auth.requires_login()\ndef ranklist():\n\tx = db(db.auth_user.id > 0).select(orderby = Points)\n\treturn dict(x=x)\n\n@auth.requires_login()\ndef question():\n\tno=request.args(0)\n\tno = int(no)\n\tif auth.user_id == None:\n\t\tredirect(URL(\'landing\'))\n\tif db((db.Level.Level == no) & (db.Level.User == auth.user_id)).select() is not None or no == 0:\n\t\tquestions = db((db.Trivia.Level == no)).select(db.Trivia.ALL)\n\t\tprint questions\n\t\treturn dict(questions = questions)\n\telse:\n\t\tredirect(\'landing\')\n\n@auth.requires_login()\ndef landing():\n\ty = db(db.Level.User == auth.user_id).select(distinct=True)\n\treturn dict(y=y)\n\n@auth.requires_login()\ndef checkans():\n\tans = int(request.vars.ans)\n\tqno = int(request.vars.Qno)\n\tx = db((db.Trivia.id == qno) & (db.Trivia.Answer == ans))\n\tif not x:\n\t\treturn False\n\t\tprint "not done"\n\telse:\n\t\tdb.Done.Insert(User=auth.user.id,Question=qno)\n\t\ty = db((db.Question.User == auth.user.id))\n\t\tif len(y) >= 5:\n\t\t\tdb.Level.insert(User=auth.user_id,Level=1)\n\t\telif len(y) >= 10:\n\t\t\tdb.Level.insert(User=auth.user_id,Level=2)\n\t\telif len(y) >= 15:\n\t\t\tdb.Level.insert(User=auth.user_id,Level=3)\n\t\telif len(y) >= 20:\n\t\t\tdb.Level.insert(User=auth.user_id,Level=4)\t\t\t\n\t\tprint "done"\n\t\treturn True\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    response.flash = "Cut the Gordian Knot!"\n    return dict(message=T(\'What is Gordian Knot?\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n\nresponse._vars=response._caller(checkans)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/lib/pymodules/python2.7/gluon/restricted.py", line 204, in restricted\n    exec ccode in environment\n  File "/home/ds-iiit/web2py/applications/Gordian_Knot/controllers/default.py", line 128, in <module>\n  File "/usr/lib/pymodules/python2.7/gluon/globals.py", line 172, in <lambda>\n    self._caller = lambda f: f()\n  File "/usr/lib/pymodules/python2.7/gluon/tools.py", line 2533, in f\n    return action(*a, **b)\n  File "/home/ds-iiit/web2py/applications/Gordian_Knot/controllers/default.py", line 54, in checkans\n    db.Done.Insert(User=auth.user.id,Question=qno)\n  File "/usr/lib/pymodules/python2.7/gluon/dal.py", line 5542, in __getattr__\n    return self[key]\n  File "/usr/lib/pymodules/python2.7/gluon/dal.py", line 5482, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'Insert\'\n'
p11
s.