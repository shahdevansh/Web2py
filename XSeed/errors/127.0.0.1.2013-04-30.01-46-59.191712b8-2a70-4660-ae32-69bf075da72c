(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'Comments'"
p3
sS'layer'
p4
S'/home/ds-iiit/web2py/applications/XSeed/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all \n#ed services (none by default)\n#########################################################################\ndef rateaproject():\n    "rate any existing project"\n    form1=SQLFORM(db.Rate)\n    avg=0\n    print "ok"\n    form2 = SQLFORM.factory(\n           Field(\'Query\',\'reference Project\',requires=IS_IN_DB(db,\'Project.id\',\'Project.Name\')))\n    if form1.process().accepted:\n        response.flash = \'Rated!\'\n   #     return dict(form=form,form2=form2,avg=avg)\n    elif form2.process().accepted:\n        no=0\n        i=0\n        rows = db(db.Rate.Project == form2.vars.Query).select(db.Rate.rating)\n        for row in rows:\n            no=no+row[\'rating\']\n            i=i+1\n        try:\n            avg=no/i\n        except:\n            avg=0\n    #    return dict(form=form,form2=form2,avg=avg)\n    return dict(form1=form1,form2=form2,avg=avg)\n    \ndef comments():\n    "comment any project"\n    rows=[]\n    form1=SQLFORM(db.Comment)\n    form2 = SQLFORM.factory(\n           Field(\'Query\',\'reference Project\',requires=IS_IN_DB(db,\'Project.id\',\'Project.Name\')))\n    if form1.process().accepted:\n        response.flash = \'Commented!\'\n   #     return dict(form=form,form2=form2,avg=avg)\n    elif form2.process().accepted:\n        rows=db(db.Comment.Project==form2.vars.Query).select(db.Comments.ALL)\n        i=0\n        rows = db(db.Rate.Project == form2.vars.Query).select(db.Rate.rating)\n    return dict(form1=form1,form2=form2,rows=rows)\n\ndef email(form):\n    a=request.application\n    b=form.vars.file\n    mail.send(to=\'sweetdevansh@gmail.com\',\n              subject=\'file shared by %s\' % auth.user.email,\n              message=\'http://web2py.com/%s/default/download/%s\' % (a,b))\n\n@auth.requires_login()\ndef editdepartment():\n     "edit an existing client"\n     this_page = db.department(request.args(0)) or redirect(URL(\'institutes\'))\n     form = crud.update(db.Institutes, this_page,\n     next = URL(\'institutes\'))\n     return dict(form=form)\n     \n@auth.requires_login()\ndef editstudent():\n     "edit an existing client"\n     this_page = db.StudentPersonal(auth.user_id)\n     form = crud.update(db.StudentPersonal,this_page)\n     next = URL(\'students.html\')\n     return dict(form=form)\n#@auth.requires_login()   \ndef editproject():\n     "edit an existing project"\n     this_page = db.Project(request.args(0)) or 1\n     row=db(db.Project.id==this_page).select(db.Project.ALL)\n     db.archive.insert(Name=this_page,ZipFile=row[0].ZipFile)\n     form = crud.update(db.Project, this_page, onaccept=auth.archive)\n     return dict(form=form)\n     \n@auth.requires_login()   \ndef joiner():\n    form = SQLFORM.factory(\n           Field(\'Query\', requires=IS_IN_DB(db,\'Project.id\',\'Project.Name\')))\n    if form.process().accepted:\n        response.flash = \'Done..\'\n        session.Query = form.vars.Query\n        db.Request.insert(StudentName=auth.user_id,ProjectName=form.vars.Query)\n    return dict(form=form)\n    \ndef approve2():\n    rows=db(db.Request.id==int(request.vars(0))).select(db.Request.ALL)\n    db.StuProject.insert(ProjectName=rows[0][\'ProjectName\'],StudentName=rows[0][\'StudentName\'])\n    return dict(rows=rows)\n    \n@auth.requires_login()              \ndef approve():\n    if db.auth_user[auth.user.id][\'typ\']!=\'faculty\':\n        redirect(\'index.html\')\n    rows=db((db.Project.Owner==auth.user.id) & (db.Request.ProjectName==db.Project.id)).select(db.Request.ALL)\n    return dict(rows=rows)\ndef seearchive():\n    this_page = request.args(0) or redirect(URL(\'institutes\'))\n    result=db((db.archive.Name==db.Project.id) & (db.Project.id==this_page)).select(db.archive.ALL)\n    arg=this_page\n    return dict(result=result,arg=arg)\n      \ndef search():\n    import re\n    new=request.get_vars\n    result=[]\n    query = new[\'s\']\n    rows=db().select(db.Project.ALL)\n    query=re.compile(query)\n    for row in rows:\n        if re.search(query,row[\'Name\']):\n                result.append(row)\n    return dict(result=result)\n    \ndef projects():\n    result=[]\n    form = SQLFORM.factory(\n        Field(\'Query\', requires=IS_NOT_EMPTY()))\n    rows=db(db.Project.id>0).select(db.Project.ALL)\n    if form.process().accepted:\n        response.flash = \'Results..\'\n        session.Query = form.vars.Query\n        import re\n        re.compile(session.Query)\n        rows=db().select(db.Project.ALL)\n        for row in rows:\n            if re.search(session.Query,row[\'Name\']):\n                result.append(row)\n        return dict(result=result,rows=rows,form=form)\n    elif form.errors:\n        response.flash = \'form has errors\'\n    return dict(form=form,result=result,rows=rows)\n@auth.requires_login()   \ndef update():\n    if auth.user.typ==\'student\':\n        n = db((db.auth_user.id==auth.user.id)).select(db.auth_user.ALL)\n        m=n[0][\'id\']\n        form1=SQLFORM(db.auth_user, record = m)\n        return dict(form1=form1)\n    elif auth.user.typ==\'faculty\':\n        n = db((db.auth_user.id==auth.user.id) & (db.auth_user.id == db.StudentPersonal.Name)).select(db.StudentPersonal.ALL)\n        m=n[0][\'id\']\n        form1=SQLFORM(db.StudentPersonal, record = m,\n        deletable = False, linkto = None,\n        upload = None, fields = None, labels = None,\n        col3 = {}, submit_button = \'Update\',\n        delete_label = \'Check to delete:\',\n        showid = False, readonly = False,\n        comments = True, keepopts = [],\n        ignore_rw = False, record_id = None,\n        formstyle = \'table3cols\',\n        buttons = [\'submit\'], separator = \': \',\n        **attributes)\n        return dict(form1=form1)\n@auth.requires_login()           \ndef faculty():\n    result=[]\n    form = SQLFORM.factory(\n        Field(\'Query\', requires=IS_NOT_EMPTY()))\n    rows=db((db.auth_user.id>0)&(db.auth_user.typ=="faculty")).select(db.auth_user.ALL)\n    if form.process().accepted:\n        response.flash = \'Searching..\'\n        session.Query = form.vars.Query\n        result=db((db.auth_user.first_name==session.Query) & (db.auth_user.typ=="faculty")).select(db.auth_user.ALL)\n        return dict(result=result,rows=rows,form=form)\n    elif form.errors:\n        response.flash = \'form has errors\'\n    return dict(form=form,result=result,rows=rows)\n\ndef students():\n    result={}\n    form = SQLFORM.factory(\n        Field(\'Query\', requires=IS_NOT_EMPTY()))\n    rows=db((db.auth_user.id>0)&(db.auth_user.typ=="student")).select(db.auth_user.ALL)\n    if form.process().accepted:\n        response.flash = \'Searching..\'\n        session.Query = form.vars.Query\n        result=db((db.auth_user.first_name==session.Query) & (db.auth_user.typ=="student")).select(db.auth_user.ALL)\n        return dict(result=result,form=form,rows=rows)\n    elif form.errors:\n        response.flash = \'form has errors\'\n        return dict(result=result)\n    return dict(form=form,result=result,rows=rows)\n\ndef institutes():\n    result=[]\n    form = SQLFORM.factory(\n        Field(\'Query\', requires=IS_NOT_EMPTY()))\n    rows=db((db.Institutes.id>0)).select(db.Institutes.ALL)\n    if form.process().accepted:\n        response.flash = \'Searching..\'\n        session.Query = form.vars.Query\n        import re\n        re.compile(session.Query)\n        rows=db().select(db.Institutes.ALL)\n        for row in rows:\n            if re.search(session.Query,row[\'Name\']):\n                result.append(row)\n        return dict(result=result,rows=rows,form=form)\n    elif form.errors:\n        response.flash = \'form has errors\'\n        return dict(result=result)\n    return dict(form=form,result=result,rows=rows)\n\ndef organizations():\n    pass\n@auth.requires_login()              \ndef Addproject():\n    form=SQLFORM(db.Project)\n    return dict(form=form)\n    \ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    response.flash = "XSeed Rocks!"\n    form=crud.create(db.item,onaccept=email,message=\'Message Sent, thanks you!\')\n    return dict(message=T(\'Welcome to XSeed!\'),form=form)\ndef login():\n    form=Auth.login(auth,next=\'/XSeed/default/index\')\n    return dict(form=form)\n\ndef register():\n    form=Auth.register(auth)\n    auth.settings.login_after_registration = True\n    auth.settings.registration_requires_approval = False\n    if form.process().accepted:\n        session.typ = form.vars.typ\n        if session.typ=="student":\n            db.auth_membership.insert(user_id=auth.user_id,group_id=1)\n            db.StudentPersonal.insert(Name=form.vars.first_name + " " + form.vars.last_name,Age=18,Address=form.vars.Address,Phone=form.vars.Phone,Image=form.vars.Image)\n        elif session.typ=="faculty":\n            db.auth_membership.insert(user_id=auth.user_id,group_id=2)\n        elif session.typ=="organization":\n            db.auth_membership.insert(user_id=auth.user_id,group_id=3)\n        redirect(\'/XSeed/default/index\')\n        response.flash(\'Account created\')\n    return dict(form=form)\n\ndef user():\n    if request.args(0) == \'login\':\n        redirect(\'/XSeed/default/login\')\n    elif request.args(0) == \'register\':\n        redirect(\'/XSeed/default/register\')\n    form=auth()\n    if form.validate() :\n        session.typ = form.vars.typ\n        if session.typ=="student":\n            db.auth_membership.insert(user_id=auth.user_id,group_id=1)\n            print "inserting"\n            db.StudentPersonal.insert(Name=form.vars.first_name + " " + form.vars.last_name,Age=18,Address=form.vars.Address,Phone=form.vars.Phone,Image=form.vars.Image)\n        elif session.typ=="faculty":\n            db.auth_membership.insert(user_id=auth.user_id,group_id=2)\n        elif session.typ=="organization":\n            db.auth_membership.insert(user_id=auth.user_id,group_id=3)\n        redirect(\'/XSeed/default/index\')\n    return dict(form=form)\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    \ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    \n    return dict(form=crud())\n\nresponse._vars=response._caller(comments)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/lib/pymodules/python2.7/gluon/restricted.py", line 204, in restricted\n    exec ccode in environment\n  File "/home/ds-iiit/web2py/applications/XSeed/controllers/default.py", line 315, in <module>\n  File "/usr/lib/pymodules/python2.7/gluon/globals.py", line 172, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ds-iiit/web2py/applications/XSeed/controllers/default.py", line 46, in comments\n    rows=db(db.Comment.Project==form2.vars.Query).select(db.Comments.ALL)\n  File "/usr/lib/pymodules/python2.7/gluon/dal.py", line 5119, in __getattr__\n    return self[key]\n  File "/usr/lib/pymodules/python2.7/gluon/dal.py", line 5113, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'Comments\'\n'
p11
s.