(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'Comment'"
p3
sS'layer'
p4
S'/home/ds-iiit/web2py/applications/Read_it/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n@auth.requires_login()\ndef comments():\n\t#x = request.args(0)\n\tform = SQLFORM(db.Comment)\n\tresults=[]\n\tif form.process().accepts:\n\t\tresponse.flash = "Comment posted"\n\t#results = db(db.Comment.ItemID == int(x)).select()\n\treturn locals()\n\ndef search():\n\tresults=[]\n\tx=request.vars[\'s\']\n\tresults=db(db.Item.Heading.contains(x)).select() \n\treturn dict(results=results)\n\n@auth.requires_login()\ndef points():\n\tx=db((db.Rated.ItemID == request.args(0)) & (db.Rated.UserID == auth.user_id)).select()\n\tprev = 0\n\tif x:\n\t\tz=db((db.Item.id == request.args(0))).select()\n\t\tprev = x[0][\'Points\']\n\t\tz[0][\'Rating\'] = z[0][\'Rating\'] - x[0][\'Points\']\n\t\tdb((db.Rated.ItemID == request.args(0)) & (db.Rated.UserID == auth.user_id)).delete()\n\n\tx=db((db.Rated.ItemID == request.args(0)) & (db.Rated.UserID == auth.user_id)).select()\n\tprint prev\n\tif not x and (prev != int(request.args(1))):\n\t\tdb.Rated.insert(UserID=auth.user_id,ItemID=request.args(0),Points=int(request.args(1)))\n\t\tz=db((db.Item.id == request.args(0))).select()\n\t\ty = z.first()\n\t\tz[0][\'Rating\'] = z[0][\'Rating\'] + int(request.args(1))\n\t\t#db(db.Item.id == request.args(0)).update(Rating+=int(request.args(1)))\n\t\tredirect(URL(listall))\n\telse:\n\t\tredirect(URL(listall))\n\ndef listall():\n\tx = db(db.Item.id>=0).select(orderby=db.Item.Rating)\n\treturn dict(x=x)\n\ndef list2():\n\tx = db(db.Item.id>=0).select(orderby=db.Item.Rating)\n\treturn dict(x=x)\n@auth.requires_login()\ndef new():\n\tform = crud.create(db.Item)\n\treturn dict(form=form)\n\n@auth.requires_login()\ndef update():\n\tform = []\n\tif db((request.args(0)==db.Item.id) & (db.Item.User == auth.user_id)).select():\n\t\tform = crud.update(db.Item,request.args(0))\n\telse:\n\t\tresponse.flash(\'Unauthorized access\')\n\t\tredirect(\'listall\')\n\treturn dict(form=form)\n\t\ndef delete():\n\tform = []\n\tif db((request.args(0)==db.Item.id) & (db.Item.User == auth.user_id)).select():\n\t\tform = crud.delete(db.Item,request.args(0))\n\telse:\n\t\tredirect(\'listall\')\n\treturn dict(form=form)\n\t\n\n@auth.requires_login()\ndef update():\n\tform = crud.update(db.Item,request.args(0))\n\treturn dict(form=form)\n\ndef list_cat():\n\tx = db(request.args(0)==db.Item.Category).select() or redirect(URL(\'listall\'))\n\treturn dict(x=x)\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    redirect(URL("listall"))\n    return dict(message=T(\'Hello World\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n\nresponse._vars=response._caller(comments)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/lib/pymodules/python2.7/gluon/restricted.py", line 204, in restricted\n    exec ccode in environment\n  File "/home/ds-iiit/web2py/applications/Read_it/controllers/default.py", line 151, in <module>\n  File "/usr/lib/pymodules/python2.7/gluon/globals.py", line 172, in <lambda>\n    self._caller = lambda f: f()\n  File "/usr/lib/pymodules/python2.7/gluon/tools.py", line 2533, in f\n    return action(*a, **b)\n  File "/home/ds-iiit/web2py/applications/Read_it/controllers/default.py", line 15, in comments\n    form = SQLFORM(db.Comment)\n  File "/usr/lib/pymodules/python2.7/gluon/dal.py", line 5119, in __getattr__\n    return self[key]\n  File "/usr/lib/pymodules/python2.7/gluon/dal.py", line 5113, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'Comment\'\n'
p11
s.