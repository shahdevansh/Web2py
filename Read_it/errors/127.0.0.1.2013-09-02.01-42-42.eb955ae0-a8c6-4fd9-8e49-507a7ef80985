(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'CommeAuthID'"
p3
sS'layer'
p4
S'/home/ds-iiit/web2py/applications/Read_it/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n@auth.requires_login()\ndef comments():\n\tx = request.args(0)\n\tform = SQLFORM(db.Comments,fields=[\'Comment\'],formstyle="divs",hidden=dict(ItemID=int(request.args(0))))\n\tform.vars.ItemID = int(x)\n\tresults=[]\n\tlink = db(db.Item.id == request.args(0)).select()\n\tif form.process().accepted:\n\t\tresponse.flash = "Comment posted"\n\telse:\n\t\tresponse.flash = "Please post"\n\tresults = db((db.Comments.ItemID == int(x)) & (db.Comments.AuthID == db.auth_user.id) & (db.Comments.ItemID==db.Item.id)).select(db.Comments.ALL,db.auth_user.ALL,db.Item.ALL)\n\treturn dict(form=form,results=results,link=link)\n\ndef search():\n\tresults=[]\n\tx=request.vars[\'s\']\n\tresults=db(db.Item.Heading.contains(x)).select()\n\treturn dict(results=results)\n\ndef listuser():\n\tusers = db(db.auth_user.id>1).select()\n\treturn dict(users=users)\n@auth.requires_membership(\'Admin\')\ndef addcat():\n\tform=SQLFORM(db.Category)\n\treturn dict(form=form)\n\n@auth.requires_membership(\'Admin\')\ndef removeuser():\n\tx = int(request.args(0))\n\tcrud.delete(db.auth_user,x)\n\tredirect(URL(listuser))\n\n@auth.requires_login()\ndef points():\n\tx=db((db.Rated.ItemID == request.args(0)) & (db.Rated.UserID == auth.user_id)).select()\n\tprev = 0\n\tif x:\n\t\tz=db((db.Item.id == request.args(0))).select()\n\t\tprev = x[0][\'Points\']\n\t\tans = z[0][\'Rating\'] - x[0][\'Points\']\n\t\tdb((db.Rated.ItemID == request.args(0)) & (db.Rated.UserID == auth.user_id)).delete()\n\t\tdb(db.Item.id == request.args(0)).update(Rating=ans)\n\n\tx=db((db.Rated.ItemID == request.args(0)) & (db.Rated.UserID == auth.user_id)).select()\n\tif not x and (prev != int(request.args(1))):\n\t\tdb.Rated.insert(UserID=auth.user_id,ItemID=request.args(0),Points=int(request.args(1)))\n\t\tz=db((db.Item.id == request.args(0))).select()\n\t\ty = z.first()\n\t\tans = z[0][\'Rating\'] + int(request.args(1))\n\t\tdb(db.Item.id == request.args(0)).update(Rating=ans)\n\telse:\n\t\tredirect(URL(listall))\n\tredirect(URL(listall))\n\ndef listall():\n\tx = db(db.Item.id>=0).select(orderby=\'Item.Rating DESC\')\n\treturn dict(x=x)\n\n@auth.requires_login()\ndef new():\n\tcrud.messages.record_created = \'Posted!\'\n\tform = crud.create(db.Item)\n\treturn dict(form=form)\n\n@auth.requires_login()\ndef update():\n\tform = []\n\tif db((request.args(0)==db.Item.id) & (db.Item.User == auth.user_id)).select():\n\t\tform = crud.update(db.Item,request.args(0))\n\telse:\n\t\tresponse.flash(\'Unauthorized access\')\n\t\tredirect(URL(listall))\n\treturn dict(form=form)\n\ndef delete():\n\tform = []\n\tif db((request.args(0)==db.Item.id) & (db.Item.User == auth.user_id) ).select():\n\t\tform = crud.delete(db.Item,request.args(0))\n\telse:\n\t\tredirect(URL(listall))\n\treturn dict(form=form)\n\ndef list_cat():\n\tx = db((request.args(0)==db.Category.id) & (db.Category.id == db.Item.Category)).select(db.Item.ALL,db.Item.ALL,orderby=db.Item.Rating)\n\treturn dict(x=x)\n\ndef check_access():\n    return True if auth.is_logged_in() else False\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    results = db(db.Category.id>0).select()\n    posts=[]\n    comments=[]\n    if check_access():\n    \tposts = db(db.Item.User == auth.user_id).select()\n    \tcomments = db(db.CommeAuthID == auth.user_id).select()\n#    redirect(URL("listall"))\n    return dict(posts=posts,comments=comments,results=results)\n\ndef user():\n    """\n    exposes:\n    http://..../[ap\n    \tprint "here"p]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n#    if form.process().accepted:\n#    \tdb.auth_membership.insert(user_id=auth.user_id,group_id=4)\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/lib/pymodules/python2.7/gluon/restricted.py", line 204, in restricted\n    exec ccode in environment\n  File "/home/ds-iiit/web2py/applications/Read_it/controllers/default.py", line 173, in <module>\n  File "/usr/lib/pymodules/python2.7/gluon/globals.py", line 172, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ds-iiit/web2py/applications/Read_it/controllers/default.py", line 113, in index\n    comments = db(db.CommeAuthID == auth.user_id).select()\n  File "/usr/lib/pymodules/python2.7/gluon/dal.py", line 5119, in __getattr__\n    return self[key]\n  File "/usr/lib/pymodules/python2.7/gluon/dal.py", line 5113, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'CommeAuthID\'\n'
p11
s.